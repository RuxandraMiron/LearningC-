// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace ContosoPizzaLearningProject
{
    /// <summary> The ContosoPizzaLearningProject service client. </summary>
    public partial class ContosoPizzaLearningProjectClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContosoPizzaLearningProjectClient. </summary>
        public ContosoPizzaLearningProjectClient() : this(new Uri(""), new ContosoPizzaLearningProjectClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ContosoPizzaLearningProjectClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ContosoPizzaLearningProjectClient(Uri endpoint, ContosoPizzaLearningProjectClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new ContosoPizzaLearningProjectClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ContosoPizzaWebApiAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.ContosoPizzaWebApiAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ContosoPizzaWebApiAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.ContosoPizzaWebApi");
            scope.Start();
            try
            {
                using HttpMessage message = CreateContosoPizzaWebApiRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ContosoPizzaWebApi and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.ContosoPizzaWebApi();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// </example>
        public virtual Response ContosoPizzaWebApi(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.ContosoPizzaWebApi");
            scope.Start();
            try
            {
                using HttpMessage message = CreateContosoPizzaWebApiRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all pizzas. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.GetAllAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("size").ToString());
        /// Console.WriteLine(result[0].GetProperty("price").ToString());
        /// Console.WriteLine(result[0].GetProperty("ingredients")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("ingredients")[0].GetProperty("grams").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfPizza</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   name: string, # Required.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAllAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetAll");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns all pizzas. </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAll and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.GetAll();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("size").ToString());
        /// Console.WriteLine(result[0].GetProperty("price").ToString());
        /// Console.WriteLine(result[0].GetProperty("ingredients")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result[0].GetProperty("ingredients")[0].GetProperty("grams").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfPizza</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   name: string, # Required.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAll(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetAll");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAllRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a pizza. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostPizzaAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PostPizzaAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PostPizzaAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {
        ///     name = "<PizzaCreateDtoName>",
        ///     size = "<0>",
        ///     price = 1234,
        ///     ingredients = new[] {
        ///         new {
        ///             name = "<IngredientName>",
        ///             grams = 1234,
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = await client.PostPizzaAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Sample request:
        ///             
        ///     POST /Pizza
        ///     {
        ///        &quot;name&quot;: &quot;Capriciosa&quot;,
        ///        &quot;size&quot; : 2,
        ///        &quot;price&quot; : 10
        ///     }
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PizzaCreateDto</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostPizzaAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.PostPizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostPizzaRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a pizza. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PostPizza with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PostPizza(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PostPizza with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {
        ///     name = "<PizzaCreateDtoName>",
        ///     size = "<0>",
        ///     price = 1234,
        ///     ingredients = new[] {
        ///         new {
        ///             name = "<IngredientName>",
        ///             grams = 1234,
        ///         }
        ///     },
        /// };
        /// 
        /// Response response = client.PostPizza(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Sample request:
        ///             
        ///     POST /Pizza
        ///     {
        ///        &quot;name&quot;: &quot;Capriciosa&quot;,
        ///        &quot;size&quot; : 2,
        ///        &quot;price&quot; : 10
        ///     }
        /// 
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PizzaCreateDto</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostPizza(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.PostPizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostPizzaRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPizzaByIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.GetPizzaByIdAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("price").ToString());
        /// Console.WriteLine(result.GetProperty("ingredients")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("ingredients")[0].GetProperty("grams").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pizza</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   name: string, # Required.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPizzaByIdAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetPizzaById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPizzaByIdRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPizzaById with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.GetPizzaById(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("size").ToString());
        /// Console.WriteLine(result.GetProperty("price").ToString());
        /// Console.WriteLine(result.GetProperty("ingredients")[0].GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("ingredients")[0].GetProperty("grams").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Pizza</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   name: string, # Required.
        ///   size: &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot;, # Optional.
        ///   price: number, # Optional.
        ///   ingredients: [
        ///     {
        ///       name: string, # Required.
        ///       grams: number, # Optional.
        ///     }
        ///   ], # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetPizzaById(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetPizzaById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPizzaByIdRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates some fields in a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PatchPizzaAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.PatchPizzaAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PatchPizzaAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {
        ///     name = "<PizzaUpdateDtoName>",
        ///     price = 1234,
        /// };
        /// 
        /// Response response = await client.PatchPizzaAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PizzaUpdateDto</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   price: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchPizzaAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.PatchPizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchPizzaRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates some fields in a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call PatchPizza with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.PatchPizza(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call PatchPizza with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// var data = new {
        ///     name = "<PizzaUpdateDtoName>",
        ///     price = 1234,
        /// };
        /// 
        /// Response response = client.PatchPizza(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PizzaUpdateDto</c>:
        /// <code>{
        ///   name: string, # Optional.
        ///   price: number, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchPizza(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.PatchPizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchPizzaRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeletePizzaAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.DeletePizzaAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeletePizzaAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.DeletePizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeletePizzaRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specific pizza. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeletePizza with required parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.DeletePizza(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeletePizza(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.DeletePizza");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeletePizzaRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns pizzas depending on which pqery parameters you provide. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="priceRangeMinValue"> The Number to use. </param>
        /// <param name="priceRangeMaxValue"> The Number to use. </param>
        /// <param name="ingredient"> The String to use. </param>
        /// <param name="isSortAsc"> The Boolean to use. </param>
        /// <param name="sortBy"> The String to use. </param>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageIndex"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetPizzaByQueryAsync.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.GetPizzaByQueryAsync();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetPizzaByQueryAsync with all parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.GetPizzaByQueryAsync(1234, "<name>", 1234, 1234, "<ingredient>", true, "<sortBy>", 1234, 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetPizzaByQueryAsync(int? id = null, string name = null, float? priceRangeMinValue = null, float? priceRangeMaxValue = null, string ingredient = null, bool? isSortAsc = null, string sortBy = null, int? pageSize = null, int? pageIndex = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetPizzaByQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPizzaByQueryRequest(id, name, priceRangeMinValue, priceRangeMaxValue, ingredient, isSortAsc, sortBy, pageSize, pageIndex, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns pizzas depending on which pqery parameters you provide. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="name"> The String to use. </param>
        /// <param name="priceRangeMinValue"> The Number to use. </param>
        /// <param name="priceRangeMaxValue"> The Number to use. </param>
        /// <param name="ingredient"> The String to use. </param>
        /// <param name="isSortAsc"> The Boolean to use. </param>
        /// <param name="sortBy"> The String to use. </param>
        /// <param name="pageSize"> The Integer to use. </param>
        /// <param name="pageIndex"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetPizzaByQuery.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.GetPizzaByQuery();
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call GetPizzaByQuery with all parameters.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.GetPizzaByQuery(1234, "<name>", 1234, 1234, "<ingredient>", true, "<sortBy>", 1234, 1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetPizzaByQuery(int? id = null, string name = null, float? priceRangeMinValue = null, float? priceRangeMaxValue = null, string ingredient = null, bool? isSortAsc = null, string sortBy = null, int? pageSize = null, int? pageIndex = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetPizzaByQuery");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPizzaByQueryRequest(id, name, priceRangeMinValue, priceRangeMaxValue, ingredient, isSortAsc, sortBy, pageSize, pageIndex, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetWeatherForecastAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = await client.GetWeatherForecastAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("date").ToString());
        /// Console.WriteLine(result[0].GetProperty("temperatureC").ToString());
        /// Console.WriteLine(result[0].GetProperty("temperatureF").ToString());
        /// Console.WriteLine(result[0].GetProperty("summary").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfWeatherForecast</c>:
        /// <code>{
        ///   date: string (ISO 8601 Format), # Optional.
        ///   temperatureC: number, # Optional.
        ///   temperatureF: number, # Optional.
        ///   summary: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetWeatherForecastAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetWeatherForecast");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWeatherForecastRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetWeatherForecast and parse the result.
        /// <code><![CDATA[
        /// var client = new ContosoPizzaLearningProjectClient();
        /// 
        /// Response response = client.GetWeatherForecast();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("date").ToString());
        /// Console.WriteLine(result[0].GetProperty("temperatureC").ToString());
        /// Console.WriteLine(result[0].GetProperty("temperatureF").ToString());
        /// Console.WriteLine(result[0].GetProperty("summary").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfWeatherForecast</c>:
        /// <code>{
        ///   date: string (ISO 8601 Format), # Optional.
        ///   temperatureC: number, # Optional.
        ///   temperatureF: number, # Optional.
        ///   summary: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetWeatherForecast(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContosoPizzaLearningProjectClient.GetWeatherForecast");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWeatherForecastRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateContosoPizzaWebApiRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "text/plain");
            return message;
        }

        internal HttpMessage CreateGetAllRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePostPizzaRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetPizzaByIdRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreatePatchPizzaRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeletePizzaRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200404);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetPizzaByQueryRequest(int? id, string name, float? priceRangeMinValue, float? priceRangeMaxValue, string ingredient, bool? isSortAsc, string sortBy, int? pageSize, int? pageIndex, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/Pizza/search", false);
            if (id != null)
            {
                uri.AppendQuery("Id", id.Value, true);
            }
            if (name != null)
            {
                uri.AppendQuery("Name", name, true);
            }
            if (priceRangeMinValue != null)
            {
                uri.AppendQuery("PriceRange.MinValue", priceRangeMinValue.Value, true);
            }
            if (priceRangeMaxValue != null)
            {
                uri.AppendQuery("PriceRange.MaxValue", priceRangeMaxValue.Value, true);
            }
            if (ingredient != null)
            {
                uri.AppendQuery("Ingredient", ingredient, true);
            }
            if (isSortAsc != null)
            {
                uri.AppendQuery("IsSortAsc", isSortAsc.Value, true);
            }
            if (sortBy != null)
            {
                uri.AppendQuery("SortBy", sortBy, true);
            }
            if (pageSize != null)
            {
                uri.AppendQuery("PageSize", pageSize.Value, true);
            }
            if (pageIndex != null)
            {
                uri.AppendQuery("PageIndex", pageIndex.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetWeatherForecastRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/WeatherForecast", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200404;
        private static ResponseClassifier ResponseClassifier200404 => _responseClassifier200404 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 404 });
    }
}
